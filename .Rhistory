data = read.csv(""https://raw.githubusercontent.com/bryandmartin/STAT302/master/\
str_1 <- "https://raw.githubusercontent.com/bryandmartin/STAT302/master/"
str_2 <- "docs/Projects/project1_bgdataviz/board_game_raw.csv"
data <- read.csv(str_1 + str_2)
?cat
str_1 <- "https://raw.githubusercontent.com/bryandmartin/STAT302/master/"
str_2 <- "docs/Projects/project1_bgdataviz/board_game_raw.csv"
data <- read.csv(cat(str_1, str_2))
str_1 <- "https://raw.githubusercontent.com/bryandmartin/STAT302/master/"
str_2 <- "docs/Projects/project1_bgdataviz/board_game_raw.csv"
data <- read.csv(cat(str_1, str_2), sep = "")
"https://raw.githubusercontent.com/bryandmartin/STAT302/master/Projects/project1_bgdataviz/board_game_raw.csv"
data <- read_csv("https://raw.githubusercontent.com/bryandmartin/STAT302/master/Projects/project1_bgdataviz/board_game_raw.csv")
"https://raw.githubusercontent.com/bryandmartin/STAT302/master/Projects/project1_bgdataviz/board_game_raw.csv"
data <- read.csv("https://raw.githubusercontent.com/bryandmartin/STAT302/master/Projects/project1_bgdataviz/board_game_raw.csv")
data <- read.csv("board_game_raw.csv")
?filter
data <- read.csv("board_game_raw.csv")
data <- data %<%
filter(yearpublished >= 1950 & users_rated >= 25)
library(tidyverse)
data <- read.csv("board_game_raw.csv")
data <- data %<%
filter(yearpublished >= 1950 & users_rated >= 25)
library(tidyverse)
data <- read.csv("board_game_raw.csv")
data <- data %>%
filter(yearpublished >= 1950 & users_rated >= 25)
library(tidyverse)
data <- read.csv("board_game_raw.csv")
data <- data %>%
filter(yearpublished >= 1950 & users_rated >= 25)
head(data)
library(tidyverse)
data <- read.csv("board_game_raw.csv")
data <- data %>%
filter(yearpublished >= 1950 & users_rated >= 25 & name == "Whist")
head(data)
library(tidyverse)
data <- read.csv("board_game_raw.csv")
data <- data %>%
filter(yearpublished >= 1950 & users_rated >= 25 & category == "Trick Taking")
head(data)
library(tidyverse)
data <- read.csv("board_game_raw.csv")
data <- data %>%
filter(yearpublished >= 1950 & users_rated >= 25")
head(data)
library(tidyverse)
data <- read.csv("board_game_raw.csv")
data <- data %>%
filter(yearpublished >= 1950 & users_rated >= 25)
head(data)
library(tidyverse)
data <- read.csv("board_game_raw.csv")
data <- data %>%
filter(yearpublished >= 1950 & users_rated >= 25 & mechanic == "Trick-taking")
head(data)
library(tidyverse)
data <- read.csv("board_game_raw.csv")
data <- data %>%
filter(yearpublished >= 1950 & users_rated >= 25 & mechanic == "Trick-taking")
data
library(tidyverse)
data <- read.csv("board_game_raw.csv")
data <- data %>%
filter(yearpublished >= 1950 & users_rated >= 25)
head(data)
?splitstackshape
??splitstackshape
install.packages("splitstackshape")
??cSplit
cSplit(data, c("category"))
library(tidyverse)
library(splitstackshape)
data <- read.csv("board_game_raw.csv")
data <- data %>%
filter(yearpublished >= 1950 & users_rated >= 25)
head(data)
?data.frame
library(tidyverse)
library(splitstackshape)
data <- read.csv("board_game_raw.csv")
data <- data %>%
filter(yearpublished >= 1950 & users_rated >= 25) %>%
data.frame()
head(data)
?read.csv
cSplit(data, c("mechanic"))
cSplit(data, c("mechanic"), direction = "long")
categories <- data %>%
select(yearpublished, category) %>%
categories <- cSplit(categories, splitCols = c("category"), direction = "long")
categories <- data %>%
select(yearpublished, category) %>%
cSplit(splitCols = c("category"), direction = "long")
head(categories)
# ggplot(data = data, aes(x = ))
categories <- data %>%
select(yearpublished, category) %>%
cSplit(splitCols = c("category"), direction = "long")
head(categories)
categories <- data %>%
select(yearpublished, category) %>%
cSplit(splitCols = c("category"), direction = "long")
ggplot(data = categories, aes(x = category, y = yearpublished))
geom_boxplot()
library(ggpubr)
library(kableExtra)
library(tidyverse)
# generate data
set.seed(302)
n <- 30
x <- sort(runif(n, -3, 3))
y <- 2*x + 2*rnorm(n)
x_test <- sort(runif(n, -3, 3))
y_test <- 2*x_test + 2*rnorm(n)
df_train <- data.frame("x" = x, "y" = y)
df_test <- data.frame("x" = x_test, "y" = y_test)
# store a theme
my_theme <- theme_bw(base_size = 16) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5))
# generate plots
g_train <- ggplot(df_train, aes(x = x, y = y)) + geom_point() +
xlim(-3, 3) + ylim(min(y, y_test), max(y, y_test)) +
labs(title = "Training Data") + my_theme
g_test <- ggplot(df_test, aes(x = x, y = y)) + geom_point() +
xlim(-3, 3) + ylim(min(y, y_test), max(y, y_test)) +
labs(title = "Test Data") + my_theme
ggarrange(g_train, g_test) # from ggpubr, to put side-by-side
lm_list <- list()
for (k in 1:10) {
lm_list[[k]] <- lm(y ~ poly(x, k), data = df_train)
}
train_err <- test_err <- rep(NA, 10)
for (k in 1:10) {
yhat_train <- predict(lm_list[[k]])
train_err[k] <- mean((df_train$y - yhat_train)^2)
yhat_test <- predict(lm_list[[k]], newdata = df_test)
test_err[k] <- mean((df_test$y - yhat_test)^2)
}
mytab <- as.table(cbind(train_err, test_err))
kable_styling(kable(mytab))
df_train$split <- "Training"
df_test$split <- "Test"
df <- rbind(df_train, df_test)
lm_10_plot <- ggplot(data = df, aes(x = x, y = y, color = split)) +
geom_point()
x_fit <- data.frame(x = seq(min(df$x), max(df$x), length = 100))
line_fit_10 <- data.frame(x = x_fit, y = predict(lm_list[[10]], newdata = x_fit))
df_train$split <- "Training"
df_test$split <- "Test"
df <- rbind(df_train, df_test)
lm_10_plot <- ggplot(data = df, aes(x = x, y = y, color = split)) +
geom_point()
x_fit <- data.frame(x = seq(min(df$x), max(df$x), length = 100))
line_fit_10 <- data.frame(x = x_fit, y = predict(lm_list[[10]], newdata = x_fit))
lm_10_plot + geom_line(data = line_fit_10, col = "black")
df_train$Split <- "Training"
df_test$Split <- "Test"
df <- rbind(df_train, df_test)
lm_10_plot <- ggplot(data = df, aes(x = x, y = y, color = Split)) +
geom_point()
x_fit <- data.frame(x = seq(min(df$x), max(df$x), length = 100))
line_fit_10 <- data.frame(x = x_fit, y = predict(lm_list[[10]], newdata = x_fit))
lm_10_plot + geom_line(data = line_fit_10, col = "black") +
labs(subtitle = paste("Degree 10 Training Error:", round(train_err[10], 3)))
# Calculate the degree 1 linear model
line_fit_1 <- data.frame(x = x_fit, y = predict(lm_list[[1]], newdata = x_fit))
# Calculate the degree 1 linear model
line_fit_1 <- data.frame(x = x_fit, y = predict(lm_list[[1]], newdata = x_fit))
# Calculate the degree 1 linear model
line_fit_1 <- data.frame(x = x_fit, y = predict(lm(y~x. data=df_train), newdata = x_fit))
# Calculate the degree 1 linear model
line_fit_1 <- data.frame(x = x_fit, y = predict(lm(y~x, data=df_train), newdata = x_fit))
# Plot the linear model and data together
lm_1_plot + geom_line(data = line_fit_11, col = "black") +
labs(subtitle = paste("Degree 1 Testing Error:", round(train_err[10], 3)))
# Calculate the degree 1 linear model
line_fit_1 <- data.frame(x = x_fit, y = predict(lm(y~x, data=df_train), newdata = x_fit))
# Plot the linear model and data together
lm_10_plot + geom_line(data = line_fit_11, col = "black") +
labs(subtitle = paste("Degree 1 Testing Error:", round(train_err[10], 3)))
# Calculate the degree 1 linear model
line_fit_1 <- data.frame(x = x_fit, y = predict(lm(y~x, data=df_train), newdata = x_fit))
# Plot the linear model and data together
lm_10_plot + geom_line(data = line_fit_1, col = "black") +
labs(subtitle = paste("Degree 1 Testing Error:", round(train_err[10], 3)))
# Calculate the degree 1 linear model
line_fit_1 <- data.frame(x = x_fit, y = predict(lm(y~x, data=df_train), newdata = x_fit))
# Plot the linear model and data together
lm_10_plot + geom_line(data = line_fit_1, col = "black") +
labs(subtitle = paste("Degree 1 Testing Error:", round(test_err[1], 3)))
degree <- 1:10
mytab <- as.table(cbind(degree, train_err, test_err))
kable_styling(kable(mytab))
install.packages(c("devtools", "roxygen2", "testthat", "knitr", "covr"))
install.packages(c("devtools", "roxygen2", "testthat", "knitr", "covr"))
setwd("C:\Users\alexk\Documents\School 2020-2021\Spring\STAT302\projects\project_3")
setwd("~/School 2020-2021/Spring/STAT302/projects/project_3")
devtools::create("mypackage")
library(devtools)
library(usethis)
library(devtools)
use_gpl3_license()
setwd("~/School 2020-2021/Spring/STAT302/projects/project_3/mypackage")
use_gpl3_license()
?my_pow
??my_pow
devtools::document()
?my_pow
devtools::check()
devtools::document()
devtools::check()
devtools::document
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::build()
terminal
install.packages("usethis")
install.packages("usethis")
usethis::use_readme_md()
usethis::use_github_action_check_standard()
usethis::use_github_action_check_standard()
usethis::use_testthat()
git add .
usethis::use_github_action_check_standard()
usethis::use_test("my_pow")
devtools::ckeck()
devtools::check()
usethis::use_test("f_to_c")
devtools::check()
usethis::use_github_action("test-coverage")
git add .
library(palmerpenguins)
data("penguins")
my_penguins <- penguins
usethis::use_data(my_penguins)
devtools::document()
usethis::use_vignette()
usethis::use_vignette("Project 3: Tutorial")
usethis::use_vignette("tutorial", title = "Project 3: Tutorial")
library(gapminder)
install.packages(gapminder)
library(tidyverse)
gapminder
install.packages(gapminder)
install.packages("gapminder")
data(gapminder)
library("gapminder")
data(gapminder)
my_gapminder <- gapminde3r
my_gapminder <- gapminder
usethis::use_data(my_gapminder)
devtools::document()
?t.test
devtools::document()
?my_t.test
?lm\
?lm
my_gapminder
devtools::document()
subset <- my_gapminder[["year", "lifeExp", "pop"]]
subset <- my_gapminder[c("year")]
subset
subset <- my_gapminder[c("year", "lifeExp", "pop")]
subset
as.matrix(subset)
gapminder
devtools::document()
devtools::document()
devtools::check()
usethis::use_test("my_rf_cv")
?expect_is
my_rf_cv(1)
?my_rf_cv
knitr::opts_chunk$set(echo = TRUE)
library(palmerpenguins)
library(tidyverse)
library(class)
library(kableExtra)
library(randomForest)
data(package = "palmerpenguins")
penguins <- na.omit(penguins)
my_knn_cv <- function(train, cl, k_nn, k_cv) {
# assign fold variable that assigns observations to folds
fold <- sample(rep(1:k_cv, length = length(cl)))
mc_rate <- vector(mode = "numeric", length = k_cv)
# iterate through 1:k
for (i in 1:k_cv) {
# within each interation, use knn() to predict class of penguin
is_test <- fold == i
is_train <- !is_test
fold_test <- train[is_test, ]
fold_train <- train[is_train, ]
cl_test <- cl[is_test]
cl_train <- cl[is_train]
# record prediction to get misclassification rate
class <- knn(fold_train, fold_test, cl = cl_train, k = k_nn)
mc_rate[i] <- mean(class != cl_test)
}
return(list("cv_error" = mean(mc_rate),
"class" = knn(train, train, cl, k = k_nn)))
}
train <- penguins %>%
select(bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g)
cl <- penguins$species
result_1 <- my_knn_cv(train, cl, 1, 5)
result_5 <- my_knn_cv(train, cl, 5, 5)
train_err_1 <- mean(result_1$class != penguins$species)
train_err_5 <- mean(result_5$class != penguins$species)
result <- list("K_nn" = c(1, 5), "CV Error" = c(result_1$cv_error,
result_5$cv_error),
"Training Error" = c(train_err_1, train_err_5))
kable_styling(kable(as.data.frame(result)))
my_rf_cv <- function(k) {
fold <- sample(rep(1:k, length = length(penguins$bill_length_mm)))
fold_mse <- vector(mode = "numeric", length = k)
# iterate through 1:k
for (i in 1:k) {
is_test <- fold == i
is_train <- !is_test
fold_test <- penguins[is_test, ]
fold_train <- penguins[is_train, ]
# record prediction to get misclassification rate
model <- randomForest(body_mass_g ~ bill_length_mm + bill_depth_mm +
flipper_length_mm, data = fold_train, ntree = 100)
predictions <- predict(model, fold_test)
fold_mse[i] <- mean((predictions - fold_test$body_mass_g)^2)
}
return(mean(fold_mse))
}
k_5_cv <- my_rf_cv(5)
devtools::check()
usethis::use_test("my_knn_cv")
devtools::check()
usethis::use_test("my_lm")
usethis::use_test("my_t.test")
?my_t.test
my_t.test
my_penguins
penguins
library(palmerpenguins)
palmerpenguins
data("penguins")
penguins
plot(bill_depth_mm, bill_length_mm)
plot(penguins$bill_depth_mm, penguins$bill_length_mm)
plot(penguins$body_mass_g, penguins$bill_length_mm)
summary(penguins$bill_depth_mm)
devtools::check()
devtools::test()
library(tidyverse)
devtools::test()
devtools::install_github("Codax2000/mypackage")
penguins
lm(bill_length_mm ~ body_mass_g, penguins)
knitr::opts_chunk$set(echo = TRUE)
id <- c(1:100)
x <- rnorm(100, mean=5, sd=2)
x2 <- rnorm(100, mean=4, sd=0.5)
y <- x * 0.1 + 0.05 * x2 + rnorm(100, 0, 0.15) # actual values are 1.5 and 2
sample_data <- data.frame("Id" = id, "x" = x, "y" = y)
my_lm <- function(data, formula) {
x <- model.matrix(object=formula, data=data)
y <- model.response(model.frame(formula=formula, data=data))
beta <- solve(t(x) %*% x) %*% t(x) %*% y
df <- dim(data)[1] - length(beta)
sigma_squared <- sum((y - x %*% beta) * (y - x %*% beta) / df)
beta_error <- diag(sqrt(sigma_squared * solve(t(x) %*% x)))
t <- beta / (beta_error)
p_vals <- 2 * pt(abs(t), df, lower.tail = FALSE)
result <- data.frame(
"coefficients" = beta,
"Std. Err" = beta_error,
"t" = t,
"Pr(>|t|)" = p_vals
)
result <- as.table(as.matrix(result))
return(result)
}
output <- my_lm(sample_data, y ~ x + x2)
print(output)
print(summary(lm(y~x + x2, sample_data))$coefficients)
output$coefficients
output
output[1, 1:3]
output[1:3, 1]
t.test(penguins$bill_depth_mm, "two.sided", 15)
?t.test
t.test(penguins$bill_depth_mm, alternative = "two.sided", mu = 15)
x <- list("one" = c(1, 1, 1), "two" = c(2, 2, 2))
x
x$one
devtools::test()
rm(list = c("my_lm"))
devtools::test()
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
Sys.which("make")
devtools::check()
devtools::test()
devtools::install()
library(mypackage)
?my_lm
devtools::test()
devtools::test()
clear()
clear_con()
devtools::check()
usethis::use_package("tibble")
devtools::check()
devtools::test()
usethis::use_pipe()
usethis::use_package("class")
usethis::use_package("dplyr")
usethis::use_package("randomForest")
devtools::test()
devtools::test()
devtools::test()
devtools::test()
local_penguins <- na.omit(my_penguins)
train <- local_penguins %>%
dplyr::select(bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g)
cl <- local_penguins$species
result <- my_knn_cv(train, cl, 1, 5)
result
devtools::test()
devtools::test()
devtools::test()
my_rf_cv
my_rf_cv(1)
?randomForest
my_rf_cv(1)
devtools::test()
library(randomForest)
my_rf_cv(1)
my_penguins
fold <- sample(rep(1:k, length = length(my_penguins$bill_length_mm)))
fold_mse <- vector(mode = "numeric", length = k)
k = 1
fold <- sample(rep(1:k, length = length(my_penguins$bill_length_mm)))
fold_mse <- vector(mode = "numeric", length = k)
for (i in 1:k) {
is_test <- fold == i
is_train <- !is_test
fold_test <- my_penguins[is_test, ]
fold_train <- my_penguins[is_train, ]
# record prediction to get misclassification rate
model <- randomForest::randomForest(body_mass_g ~ bill_length_mm +
bill_depth_mm + flipper_length_mm,
data = fold_train, ntree = 100)
predictions <- predict(model, fold_test)
fold_mse[i] <- mean((predictions - fold_test$body_mass_g)^2)
}
my_rf_cv(5)
my_rf_cv(5)
local_penguins <- na.omit(my_penguins)
fold <- sample(rep(1:k, length = length(local_penguins$bill_length_mm)))
fold_mse <- vector(mode = "numeric", length = k)
k = 5
local_penguins <- na.omit(my_penguins)
fold <- sample(rep(1:k, length = length(local_penguins$bill_length_mm)))
fold_mse <- vector(mode = "numeric", length = k)
for (i in 1:k) {
is_test <- fold == i
is_train <- !is_test
fold_test <- local_penguins[is_test, ]
fold_train <- local_penguins[is_train, ]
# record prediction to get misclassification rate
model <- randomForest::randomForest(body_mass_g ~ bill_length_mm +
bill_depth_mm + flipper_length_mm,
data = fold_train, ntree = 100)
predictions <- predict(model, fold_test)
fold_mse[i] <- mean((predictions - fold_test$body_mass_g)^2)
}
devtools::test()
local_penguins <- na.omit(my_penguins)
result <- my_t.test(local_penguins$bill_depth_mm, "two.sided", 15)
result$alternative
result$test_stat
devtools::test()
result$df
t.test(local_penguins$bill_depth_mm, alternative = "two.sided", df = 15)
t.test(local_penguins$bill_depth_mm, alternative = "two.sided", mu = 15)
devtools::test()
result <- my_lm(local_penguins, bill_length_mm ~ body_mass_g)
result
lm(bill_length_mm ~ body_mass_g, data = local_penguins)
devtools::test()
local_penguins <- na.omit(my_penguins)
result <- my_lm(local_penguins, bill_length_mm ~ body_mass_g)
result
result[1, 1] - 27.151
result[1, 1] - 27.151 < 0.01
result[1, 2] - 0.004 < 0.001
result[1, 2]
result[2, 1] - 0.004 < 0.001
devtools::test()
my_rf_cv(5)
sqrt(my_rf_cv(5))
devtools::test()
devtools::test()
t.test(local_penguins$bill_depth_mm, alternative = "less", mu = 15)
devtools::test()
devtools::check()
devtools::document()
