#pi = 0.4
hist(mat_2[, 2], main = "Histogram of Bin(1000, 0.4)")
#pi = 0.6
hist(mat_2[, 3], main = "Histogram of Bin(1000, 0.6)")
#pi = 0.8
hist(mat_2[, 4], main = "Histogram of Bin(1000, 0.8)")
means = matrix(nrow=2, ncol=4)
# row and column names
rownames(means) <- c("n = 5", "n = 10000")
colnames(means) <- c("Bin(5, 0.2)", "Bin(5, 0.4)", "Bin(5, 0.6)", "Bin(5, 0.8)")
# column means for each matrix
means[1, ] <- colMeans(mat_1)
means[2, ] <- colMeans(mat_2)
# display as table
tab <- data.frame(means)
kable_styling(kable(means))
means = matrix(nrow=2, ncol=4)
# row and column names
rownames(means) <- c("n = 5", "n = 10000")
colnames(means) <-
c("Bin(1000, 0.2)", "Bin(1000, 0.4)", "Bin(1000, 0.6)", "Bin(1000, 0.8)")
# column means for each matrix
means[1, ] <- colMeans(mat_1)
means[2, ] <- colMeans(mat_2)
# display as table
tab <- data.frame(means)
kable_styling(kable(means))
rm("mat_1")
rm("tab")
rm("mat_2")
rm("means")
rm("n")
is_numeric = function(input) {
return(is.numeric(input))
}
is_numeric(10)
is_numeric("I'll die, probably. LET's TRY IT - Bdubs, HermitCraft 7")
is_numeric <- function(input) {
return(is.numeric(input))
}
magnitude <- function(input) {
if (is.numeric(input)) {
stop("Input should be numeric")
} else {
return(abs(input))
}
}
magnitude(5)
if (~is.numeric(input)) {
stop("Input should be numeric")
} else {
return(abs(input))
}
if (!is.numeric(input)) {
stop("Input should be numeric")
} else {
return(abs(input))
}
magnitude <- function(input) {
if (!is.numeric(input)) {
stop("Input should be numeric")
} else {
return(abs(input))
}
}
magnitude(5)
magnitude(-5)
magnitude("a string")
# Function: magnitude, returns the absolute value of the input
# input: input, must be numeric
# return: output, numeric absolute value of the input
magnitude <- function(input) {
if (!is.numeric(input)) {
stop("Input should be numeric")
} else {
return(abs(input))
}
}
?c
?vector
c(1, 2).length
c(1, 2)
x = c(1, 2)
x.length()
length(x)
# returns [1, 3, 6]
vector_ith_sum(c(1, 2, 3))
# takes an input and returns a vector of the sum of the input vector up to
# the current element
# input: numeric vector of at least length 1
# output: numeric vector of the sums of the input up to current index
vector_ith_sum <- function(input) {
sum <- 0
result <- vector(mode = "numeric", length = length(input))
for (i in 1:length(input)) {
sum = sum + input[i]
result[i] = sum
}
return(result)
}
# returns [1, 3, 6]
vector_ith_sum(c(1, 2, 3))
matrix(c(1, 2, 3, 4), nrow = 2, ncol = 2)
ncol(matrix(c(1, 2, 3, 4), nrow = 2, ncol = 2))
# row_minus_col: replaces each element in a matrix with the
#                row index minus the column index
# input: numeric matrix
# output: numeric matrix of same size as input, each element replaced with
#         row index - column index
row_minus_col <- function(m) {
for (row in 1:nrow(m)) {
for (col in 1:ncol(m)) {
m[row, col] = row - col
}
}
}
# demonstrates on a sample matrix
sample = matrix(c(3, 4, 5, 6), nrow = 2, ncol = 2)
row_minus_col(sample)
# row_minus_col: replaces each element in a matrix with the
#                row index minus the column index
# input: numeric matrix
# output: numeric matrix of same size as input, each element replaced with
#         row index - column index
row_minus_col <- function(m) {
for (row in 1:nrow(m)) {
for (col in 1:ncol(m)) {
m[row, col] = row - col
}
}
}
# demonstrates on a sample matrix
sample = matrix(c(3, 4, 5, 6), nrow = 2, ncol = 2)
row_minus_col(sample)
print(sample)
# row_minus_col: replaces each element in a matrix with the
#                row index minus the column index
# input: numeric matrix
# output: numeric matrix of same size as input, each element replaced with
#         row index - column index
row_minus_col <- function(m) {
for (row in 1:nrow(m)) {
for (col in 1:ncol(m)) {
m[row, col] = row - col
}
}
}
# demonstrates on a sample matrix
sample = matrix(c(3, 4, 5, 6), nrow = 2, ncol = 2)
row_minus_col(sample)
print(sample)
# row_minus_col: replaces each element in a matrix with the
#                row index minus the column index, does not change input matrix
# input: numeric matrix
# output: numeric matrix of same size as input, each element replaced with
#         row index - column index
row_minus_col <- function(m) {
result = matrix(nrow = nrow(m), ncol = ncol(m))
for (row in 1:nrow(m)) {
for (col in 1:ncol(m)) {
result[row, col] = row - col
}
}
return(result)
}
# demonstrates on a sample matrix
sample = matrix(c(3, 4, 5, 6), nrow = 2, ncol = 2)
print(row_minus_col(sample))
knitr::opts_chunk$set(echo = TRUE)
# returns the hard-threshold value of each value in x
# input: numeric input x, numeric value lambda
# output: numeric vector where each value is 0 if its absolute value is less
# than lambda, and it's value otherwise
hard_threshold <- function(x, lambda) {
result <- vector(mode = "numeric", length = length(x))
for (i in 1:length(x)) {
if (abs(x[i] >= lambda)) {
result[i] <- x[i]
} else {
result[i] <- 0
}
}
return(result)
}
lambda <- 4
hard_threshold(c(-5, -3, 0, 3, 5), lambda)
# returns the hard-threshold value of each value in x
# input: numeric input x, numeric value lambda
# output: numeric vector where each value is 0 if its absolute value is less
# than lambda, and it's value otherwise
hard_threshold <- function(x, lambda) {
result <- vector(mode = "numeric", length = length(x))
for (i in 1:length(x)) {
if (abs(x[i]) >= lambda) {
result[i] <- x[i]
} else {
result[i] <- 0
}
}
return(result)
}
lambda <- 4
hard_threshold(c(-5, -3, 0, 3, 5), lambda)
lambda <- 2
hard_threshold(c(-7, -5, -3, 0, 3, 5, 7), lambda)
lambda <-6
hard_threshold(c(-7, -5, -3, 0, 3, 5, 7), lambda)
lambda <- 2
hard_threshold(c(-7, -5, -3, 0, 3, 5, 7), lambda)
?sign
lambda <- 4
soft_threshold(c(-5, -3, 0, 3, 5), 4)
# soft_threshold: returns the soft-threshold result of each value in the given
# numeric vector, compared to the given value of lambda
# input: numeric vector x, numeric value lambda
# output: numeric vector of soft threshold function of given lambda applied to
# each value in the input
soft_threshold <- function(x, lambda) {
result <- vector(mode = "numeric", length = length(x))
for (i in 1:length(x)) {
if (abs(x) >= lambda) {
result[i] <- sign(x[i]) * (abs(x) - lambda)
} else {
result[i] <- 0
}
}
return(result)
}
lambda <- 4
soft_threshold(c(-5, -3, 0, 3, 5), 4)
lambda <- 4
soft_threshold(c(-5, -3, 0, 3, 5), lambda)
# soft_threshold: returns the soft-threshold result of each value in the given
# numeric vector, compared to the given value of lambda
# input: numeric vector x, numeric value lambda
# output: numeric vector of soft threshold function of given lambda applied to
# each value in the input
soft_threshold <- function(x, lambda) {
result <- vector(mode = "numeric", length = length(x))
for (i in 1:length(x)) {
if (abs(x[i]) >= lambda) {
result[i] <- sign(x[i]) * (abs(x[i]) - lambda)
} else {
result[i] <- 0
}
}
return(result)
}
lambda <- 4
soft_threshold(c(-5, -3, 0, 3, 5), lambda)
lambda <- 2
soft_threshold(c(-7, -5, -3, 0, 3, 5, 7), lambda)
linearMod <- lm(dist ~ speed, data = cars)
```{r}
str(linearMod)
method_one <- linearMod$coefficients
method_two <- linearMod["coefficients"]
print(method_one)
print(method_two)
method_one <- linearMod$coefficients
method_two <- linearMod[["coefficients"]]
print(method_one)
print(method_two)
install.packages("tidyverse")
data = read.csv("https://raw.githubusercontent.com/bryandmartin/STAT302/master/
docs/Projects/project1_bgdataviz/board_game_raw.csv")
data = read.csv("https://raw.githubusercontent.com/bryandmartin/STAT302/master/\
docs/Projects/project1_bgdataviz/board_game_raw.csv")
data = read.csv(""https://raw.githubusercontent.com/bryandmartin/STAT302/master/\
str_1 <- "https://raw.githubusercontent.com/bryandmartin/STAT302/master/"
str_2 <- "docs/Projects/project1_bgdataviz/board_game_raw.csv"
data <- read.csv(str_1 + str_2)
?cat
str_1 <- "https://raw.githubusercontent.com/bryandmartin/STAT302/master/"
str_2 <- "docs/Projects/project1_bgdataviz/board_game_raw.csv"
data <- read.csv(cat(str_1, str_2))
str_1 <- "https://raw.githubusercontent.com/bryandmartin/STAT302/master/"
str_2 <- "docs/Projects/project1_bgdataviz/board_game_raw.csv"
data <- read.csv(cat(str_1, str_2), sep = "")
"https://raw.githubusercontent.com/bryandmartin/STAT302/master/Projects/project1_bgdataviz/board_game_raw.csv"
data <- read_csv("https://raw.githubusercontent.com/bryandmartin/STAT302/master/Projects/project1_bgdataviz/board_game_raw.csv")
"https://raw.githubusercontent.com/bryandmartin/STAT302/master/Projects/project1_bgdataviz/board_game_raw.csv"
data <- read.csv("https://raw.githubusercontent.com/bryandmartin/STAT302/master/Projects/project1_bgdataviz/board_game_raw.csv")
data <- read.csv("board_game_raw.csv")
?filter
data <- read.csv("board_game_raw.csv")
data <- data %<%
filter(yearpublished >= 1950 & users_rated >= 25)
library(tidyverse)
data <- read.csv("board_game_raw.csv")
data <- data %<%
filter(yearpublished >= 1950 & users_rated >= 25)
library(tidyverse)
data <- read.csv("board_game_raw.csv")
data <- data %>%
filter(yearpublished >= 1950 & users_rated >= 25)
library(tidyverse)
data <- read.csv("board_game_raw.csv")
data <- data %>%
filter(yearpublished >= 1950 & users_rated >= 25)
head(data)
library(tidyverse)
data <- read.csv("board_game_raw.csv")
data <- data %>%
filter(yearpublished >= 1950 & users_rated >= 25 & name == "Whist")
head(data)
library(tidyverse)
data <- read.csv("board_game_raw.csv")
data <- data %>%
filter(yearpublished >= 1950 & users_rated >= 25 & category == "Trick Taking")
head(data)
library(tidyverse)
data <- read.csv("board_game_raw.csv")
data <- data %>%
filter(yearpublished >= 1950 & users_rated >= 25")
head(data)
library(tidyverse)
data <- read.csv("board_game_raw.csv")
data <- data %>%
filter(yearpublished >= 1950 & users_rated >= 25)
head(data)
library(tidyverse)
data <- read.csv("board_game_raw.csv")
data <- data %>%
filter(yearpublished >= 1950 & users_rated >= 25 & mechanic == "Trick-taking")
head(data)
library(tidyverse)
data <- read.csv("board_game_raw.csv")
data <- data %>%
filter(yearpublished >= 1950 & users_rated >= 25 & mechanic == "Trick-taking")
data
library(tidyverse)
data <- read.csv("board_game_raw.csv")
data <- data %>%
filter(yearpublished >= 1950 & users_rated >= 25)
head(data)
?splitstackshape
??splitstackshape
install.packages("splitstackshape")
??cSplit
cSplit(data, c("category"))
library(tidyverse)
library(splitstackshape)
data <- read.csv("board_game_raw.csv")
data <- data %>%
filter(yearpublished >= 1950 & users_rated >= 25)
head(data)
?data.frame
library(tidyverse)
library(splitstackshape)
data <- read.csv("board_game_raw.csv")
data <- data %>%
filter(yearpublished >= 1950 & users_rated >= 25) %>%
data.frame()
head(data)
?read.csv
cSplit(data, c("mechanic"))
cSplit(data, c("mechanic"), direction = "long")
categories <- data %>%
select(yearpublished, category) %>%
categories <- cSplit(categories, splitCols = c("category"), direction = "long")
categories <- data %>%
select(yearpublished, category) %>%
cSplit(splitCols = c("category"), direction = "long")
head(categories)
# ggplot(data = data, aes(x = ))
categories <- data %>%
select(yearpublished, category) %>%
cSplit(splitCols = c("category"), direction = "long")
head(categories)
categories <- data %>%
select(yearpublished, category) %>%
cSplit(splitCols = c("category"), direction = "long")
ggplot(data = categories, aes(x = category, y = yearpublished))
geom_boxplot()
library(ggpubr)
library(kableExtra)
library(tidyverse)
# generate data
set.seed(302)
n <- 30
x <- sort(runif(n, -3, 3))
y <- 2*x + 2*rnorm(n)
x_test <- sort(runif(n, -3, 3))
y_test <- 2*x_test + 2*rnorm(n)
df_train <- data.frame("x" = x, "y" = y)
df_test <- data.frame("x" = x_test, "y" = y_test)
# store a theme
my_theme <- theme_bw(base_size = 16) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5))
# generate plots
g_train <- ggplot(df_train, aes(x = x, y = y)) + geom_point() +
xlim(-3, 3) + ylim(min(y, y_test), max(y, y_test)) +
labs(title = "Training Data") + my_theme
g_test <- ggplot(df_test, aes(x = x, y = y)) + geom_point() +
xlim(-3, 3) + ylim(min(y, y_test), max(y, y_test)) +
labs(title = "Test Data") + my_theme
ggarrange(g_train, g_test) # from ggpubr, to put side-by-side
lm_list <- list()
for (k in 1:10) {
lm_list[[k]] <- lm(y ~ poly(x, k), data = df_train)
}
train_err <- test_err <- rep(NA, 10)
for (k in 1:10) {
yhat_train <- predict(lm_list[[k]])
train_err[k] <- mean((df_train$y - yhat_train)^2)
yhat_test <- predict(lm_list[[k]], newdata = df_test)
test_err[k] <- mean((df_test$y - yhat_test)^2)
}
mytab <- as.table(cbind(train_err, test_err))
kable_styling(kable(mytab))
df_train$split <- "Training"
df_test$split <- "Test"
df <- rbind(df_train, df_test)
lm_10_plot <- ggplot(data = df, aes(x = x, y = y, color = split)) +
geom_point()
x_fit <- data.frame(x = seq(min(df$x), max(df$x), length = 100))
line_fit_10 <- data.frame(x = x_fit, y = predict(lm_list[[10]], newdata = x_fit))
df_train$split <- "Training"
df_test$split <- "Test"
df <- rbind(df_train, df_test)
lm_10_plot <- ggplot(data = df, aes(x = x, y = y, color = split)) +
geom_point()
x_fit <- data.frame(x = seq(min(df$x), max(df$x), length = 100))
line_fit_10 <- data.frame(x = x_fit, y = predict(lm_list[[10]], newdata = x_fit))
lm_10_plot + geom_line(data = line_fit_10, col = "black")
df_train$Split <- "Training"
df_test$Split <- "Test"
df <- rbind(df_train, df_test)
lm_10_plot <- ggplot(data = df, aes(x = x, y = y, color = Split)) +
geom_point()
x_fit <- data.frame(x = seq(min(df$x), max(df$x), length = 100))
line_fit_10 <- data.frame(x = x_fit, y = predict(lm_list[[10]], newdata = x_fit))
lm_10_plot + geom_line(data = line_fit_10, col = "black") +
labs(subtitle = paste("Degree 10 Training Error:", round(train_err[10], 3)))
# Calculate the degree 1 linear model
line_fit_1 <- data.frame(x = x_fit, y = predict(lm_list[[1]], newdata = x_fit))
# Calculate the degree 1 linear model
line_fit_1 <- data.frame(x = x_fit, y = predict(lm_list[[1]], newdata = x_fit))
# Calculate the degree 1 linear model
line_fit_1 <- data.frame(x = x_fit, y = predict(lm(y~x. data=df_train), newdata = x_fit))
# Calculate the degree 1 linear model
line_fit_1 <- data.frame(x = x_fit, y = predict(lm(y~x, data=df_train), newdata = x_fit))
# Plot the linear model and data together
lm_1_plot + geom_line(data = line_fit_11, col = "black") +
labs(subtitle = paste("Degree 1 Testing Error:", round(train_err[10], 3)))
# Calculate the degree 1 linear model
line_fit_1 <- data.frame(x = x_fit, y = predict(lm(y~x, data=df_train), newdata = x_fit))
# Plot the linear model and data together
lm_10_plot + geom_line(data = line_fit_11, col = "black") +
labs(subtitle = paste("Degree 1 Testing Error:", round(train_err[10], 3)))
# Calculate the degree 1 linear model
line_fit_1 <- data.frame(x = x_fit, y = predict(lm(y~x, data=df_train), newdata = x_fit))
# Plot the linear model and data together
lm_10_plot + geom_line(data = line_fit_1, col = "black") +
labs(subtitle = paste("Degree 1 Testing Error:", round(train_err[10], 3)))
# Calculate the degree 1 linear model
line_fit_1 <- data.frame(x = x_fit, y = predict(lm(y~x, data=df_train), newdata = x_fit))
# Plot the linear model and data together
lm_10_plot + geom_line(data = line_fit_1, col = "black") +
labs(subtitle = paste("Degree 1 Testing Error:", round(test_err[1], 3)))
degree <- 1:10
mytab <- as.table(cbind(degree, train_err, test_err))
kable_styling(kable(mytab))
install.packages(c("devtools", "roxygen2", "testthat", "knitr", "covr"))
install.packages(c("devtools", "roxygen2", "testthat", "knitr", "covr"))
setwd("C:\Users\alexk\Documents\School 2020-2021\Spring\STAT302\projects\project_3")
setwd("~/School 2020-2021/Spring/STAT302/projects/project_3")
devtools::create("mypackage")
library(devtools)
library(usethis)
library(devtools)
use_gpl3_license()
setwd("~/School 2020-2021/Spring/STAT302/projects/project_3/mypackage")
use_gpl3_license()
?my_pow
??my_pow
devtools::document()
?my_pow
devtools::check()
devtools::document()
devtools::check()
devtools::document
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::build()
terminal
install.packages("usethis")
install.packages("usethis")
usethis::use_readme_md()
usethis::use_github_action_check_standard()
usethis::use_github_action_check_standard()
usethis::use_testthat()
git add .
usethis::use_github_action_check_standard()
usethis::use_test("my_pow")
devtools::ckeck()
devtools::check()
usethis::use_test("f_to_c")
devtools::check()
usethis::use_github_action("test-coverage")
git add .
library(palmerpenguins)
data("penguins")
my_penguins <- penguins
usethis::use_data(my_penguins)
devtools::document()
